---
// src/layouts/Layout.astro
import '@fortawesome/fontawesome-free/css/all.min.css';
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';
// Correctly import OG image from your assets
import ogDefaultImage from '../assets/images/linkarooie_og.jpg';

interface Props {
  title: string;
  description?: string;
  ogImage?: string | ImageMetadata;
  username?: string;
}

const { 
  title, 
  description = 'Linkarooie - A Linktree-style app to showcase your profile, links, and achievements',
  ogImage = ogDefaultImage,
  username 
} = Astro.props;

// Handle both string paths and imported images
const ogImageUrl = typeof ogImage === 'string' ? ogImage : ogImage.src;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO -->
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="twitter:card" content="summary_large_image" />
    
    <ViewTransitions />
  </head>
  <body class="min-h-screen flex flex-col bg-gray-50">
    <header class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex">
            <div class="flex-shrink-0 flex items-center">
              <a href="/" class="text-xl font-bold text-blue-600">
                Linkarooie
              </a>
            </div>
          </div>
          <div class="flex items-center">
            <a href="https://github.com/loftwah/linkarooie" target="_blank" rel="noopener" class="text-gray-500 hover:text-gray-700">
              <span class="sr-only">GitHub</span>
              <i class="fab fa-github text-lg"></i>
            </a>
          </div>
        </div>
      </div>
    </header>
    
    <main class="flex-grow">
      <slot />
    </main>
    
    <footer class="bg-white border-t border-gray-200 py-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-col md:flex-row justify-between items-center">
          <div class="mb-4 md:mb-0">
            <p class="text-gray-500">
              &copy; {new Date().getFullYear()} Linkarooie
            </p>
          </div>
          <div>
            <p class="text-gray-500">
              Made with ðŸ’™ by <a href="https://github.com/loftwah" class="text-blue-600 hover:underline">Loftwah</a>
            </p>
          </div>
        </div>
      </div>
    </footer>
    
    <!-- PostHog Analytics -->
    <script define:vars={{ username }}>
      !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug getPageViewId captureTraceFeedback captureTraceMetric".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
      
      // Using exact environment variable names as in your .env file
      const POSTHOG_KEY = import.meta.env.POSTHOG_KEY || 'phc_BrmIHTxcm8cDyDjAGkWAimepYqJhSaXiXIVDBeMOHUM';
      const POSTHOG_HOST = import.meta.env.POSTHOG_HOST || 'https://us.i.posthog.com';
      
      posthog.init(POSTHOG_KEY, {
        api_host: POSTHOG_HOST,
        capture_pageview: false,
        person_profiles: 'identified_only'
      });
      
      // Capture page view with profile info
      document.addEventListener('DOMContentLoaded', () => {
        posthog.capture('page_view', {
          profile: username || 'home',
          path: window.location.pathname,
          url: window.location.href,
          title: document.title,
          referrer: document.referrer,
          is_bot: /bot|googlebot|crawler|spider|robot|crawling/i.test(navigator.userAgent)
        });
      });
      
      // Track link and achievement clicks
      document.addEventListener('click', (e) => {
        const linkEl = e.target.closest('a[data-track="true"]');
        if (linkEl) {
          const linkId = linkEl.getAttribute('data-id');
          const isHidden = linkEl.getAttribute('data-hidden') === 'true';
          const type = linkEl.getAttribute('data-type') || 'link';
          
          posthog.capture(`${type}_click`, {
            id: linkId,
            url: linkEl.href,
            text: linkEl.innerText,
            hidden: isHidden,
            profile: username || 'home'
          });
        }
      });
    </script>
  </body>
</html>