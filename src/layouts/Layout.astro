---
// src/layouts/Layout.astro
import '@fortawesome/fontawesome-free/css/all.min.css';
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';
import { Image } from 'astro:assets';
import defaultOgImage from '../assets/images/linkarooie_og.jpg';
import icon from '../assets/images/icon.png';

interface Props {
  title: string;
  description?: string;
  ogImage?: any; // This can be an imported image or string
  username?: string;
}

const { 
  title, 
  description = 'Linkarooie - A Linktree-style app to showcase your profile, links, and achievements',
  ogImage = defaultOgImage,
  username 
} = Astro.props;

// Handle both imported image objects and string paths
const ogImageUrl = typeof ogImage === 'string' ? ogImage : ogImage.src;

// Get environment variables for PostHog
const posthogKey = import.meta.env.POSTHOG_KEY || 'phc_BrmIHTxcm8cDyDjAGkWAimepYqJhSaXiXIVDBeMOHUM';
const posthogHost = import.meta.env.POSTHOG_HOST || 'https://us.i.posthog.com';

// Add a flag to disable PostHog in development
const isProduction = import.meta.env.PROD;
const enablePostHog = isProduction;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO -->
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="twitter:card" content="summary_large_image" />
    
    <!-- Dark mode script - Must be inline and run before any rendering -->
    <script is:inline>
      // On page load, check local storage or system preference
      function updateTheme() {
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }
      
      // Initial theme check
      updateTheme();
    </script>
    
    <ViewTransitions />
  </head>
  <body class="min-h-screen flex flex-col bg-gray-100 dark:bg-gray-900 transition-colors duration-200">
    <header class="bg-gray-50 dark:bg-gray-800 shadow-md transition-colors duration-200 border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-14 sm:h-16">
          <div class="flex">
            <div class="flex-shrink-0 flex items-center">
              <a href="/" class="text-lg sm:text-xl font-bold text-gray-900 dark:text-white flex items-center transition-all duration-300 hover:scale-105">
                <Image src={icon} alt="Linkarooie Icon" width={28} height={28} class="mr-1.5 sm:mr-2 invert dark:invert-0 transition-all duration-200 hover:scale-110" />
                Link<span class="text-[#9333ea] dark:text-[#a5fd0e]">arooie</span>
              </a>
            </div>
          </div>
          <div class="flex items-center space-x-3 sm:space-x-4">
            <!-- Dark mode toggle -->
            <button id="theme-toggle" class="text-[#9333ea] dark:text-[#a5fd0e] hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg text-sm p-1.5 sm:p-2 transition-all duration-200 hover:scale-110" aria-label="Toggle dark mode">
              <i id="theme-toggle-dark-icon" class="fas fa-moon hidden"></i>
              <i id="theme-toggle-light-icon" class="fas fa-sun hidden"></i>
            </button>
            <a href="https://github.com/loftwah/linkarooie-3" target="_blank" rel="noopener" class="text-[#9333ea] dark:text-[#a5fd0e] hover:text-[#9333ea]/80 dark:hover:text-[#c7ff5a] transition-all duration-200 hover:scale-110 p-1.5 sm:p-2">
              <span class="sr-only">GitHub</span>
              <i class="fab fa-github text-base sm:text-lg"></i>
            </a>
          </div>
        </div>
      </div>
    </header>
    
    <main class="flex-grow">
      <slot />
    </main>
    
    <footer class="bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 py-4 sm:py-6 transition-colors duration-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-col sm:flex-row justify-between items-center text-center sm:text-left gap-2 sm:gap-0">
          <div class="mb-2 sm:mb-0">
            <p class="text-sm sm:text-base text-gray-500 dark:text-gray-400">
              &copy; {new Date().getFullYear()} Linkarooie
            </p>
          </div>
          <div>
            <p class="text-sm sm:text-base text-gray-700 dark:text-gray-300">
              Made with <span class="text-[#9333ea] dark:text-[#a5fd0e]">ðŸ’š</span> by <a href="https://github.com/loftwah" class="text-[#9333ea] dark:text-[#a5fd0e] hover:text-[#9333ea]/80 dark:hover:text-[#c7ff5a] hover:underline transition-all duration-200">Loftwah</a>
            </p>
          </div>
        </div>
      </div>
    </footer>
    
    <!-- Theme Toggle Script - Plain JS, no imports -->
    <script is:inline>
      // Set up the theme toggle functionality after page load
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggleBtn = document.getElementById('theme-toggle');
        const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

        // Set initial icon state
        if (document.documentElement.classList.contains('dark')) {
          themeToggleLightIcon.classList.remove('hidden');
          themeToggleDarkIcon.classList.add('hidden');
        } else {
          themeToggleDarkIcon.classList.remove('hidden');
          themeToggleLightIcon.classList.add('hidden');
        }

        // Toggle theme on click
        themeToggleBtn.addEventListener('click', () => {
          // Toggle the dark class
          document.documentElement.classList.toggle('dark');
          
          // Update icons
          themeToggleDarkIcon.classList.toggle('hidden');
          themeToggleLightIcon.classList.toggle('hidden');
          
          // Save preference to localStorage
          if (document.documentElement.classList.contains('dark')) {
            localStorage.theme = 'dark';
          } else {
            localStorage.theme = 'light';
          }
        });
      });

      // Handle view transitions - important for Astro's page transitions
      document.addEventListener('astro:after-swap', () => {
        // Re-apply the theme after page navigation
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }

        // Re-initialize the toggle button after page navigation
        const themeToggleBtn = document.getElementById('theme-toggle');
        const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
        const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

        if (themeToggleBtn && themeToggleDarkIcon && themeToggleLightIcon) {
          // Set correct icon visibility
          if (document.documentElement.classList.contains('dark')) {
            themeToggleLightIcon.classList.remove('hidden');
            themeToggleDarkIcon.classList.add('hidden');
          } else {
            themeToggleDarkIcon.classList.remove('hidden');
            themeToggleLightIcon.classList.add('hidden');
          }
          
          // Re-attach click event
          themeToggleBtn.addEventListener('click', () => {
            document.documentElement.classList.toggle('dark');
            themeToggleDarkIcon.classList.toggle('hidden');
            themeToggleLightIcon.classList.toggle('hidden');
            
            if (document.documentElement.classList.contains('dark')) {
              localStorage.theme = 'dark';
            } else {
              localStorage.theme = 'light';
            }
          });
        }
      });
    </script>
    
    <!-- PostHog Analytics - Optimized and Fixed for Link-in-Bio -->
    <script is:inline define:vars={{ posthogKey, posthogHost, username, enablePostHog }}>
      // PostHog standard loading snippet
      !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);

      // Enable analytics (adjust this logic as needed)
      const analyticsEnabled = true;

      if (analyticsEnabled && typeof window !== 'undefined') {
        try {
          // Initialize PostHog with minimal, recursion-safe configuration
          posthog.init(posthogKey, {
            api_host: posthogHost,
            capture_pageview: false,         // Manual page view tracking
            autocapture: false,              // Disable autocapture to prevent recursion
            session_recording: { enabled: false },
            property_blacklist: ['$lib', '$active_feature_flags', '$enabled_feature_flags'],
            disable_session_recording: true,
            disable_feature_flags: true,
            debug: false,
            bootstrap: { distinctID: 'link-bio-user' }
          });

          // Initial page view and link click setup
          window.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => {
              // Capture initial page view if PostHog is loaded
              if (posthog.__loaded) {
                try {
                  posthog.capture('pageview', {
                    page: window.location.pathname,
                    profile: username || 'home'
                  });
                } catch (e) {}
              }

              // Single document-level listener for link clicks
              document.addEventListener('click', (event) => {
                if (event.target.tagName === 'A' && event.target.href && posthog.__loaded) {
                  try {
                    posthog.capture('link_clicked', {
                      url: event.target.href,
                      text: event.target.innerText || event.target.textContent || 'Unknown',
                      profile: username || 'home'
                    });
                  } catch (e) {}
                }
              });
            }, 1000); // Delay to ensure DOM and PostHog are ready
          });

          // Handle Astro page transitions
          document.addEventListener('astro:after-swap', () => {
            setTimeout(() => {
              if (posthog.__loaded) {
                try {
                  posthog.capture('pageview', {
                    page: window.location.pathname,
                    profile: username || 'home'
                  });
                } catch (e) {}
              }
            }, 1000); // Delay to debounce rapid transitions
          });
        } catch (e) {
          console.warn('PostHog setup error:', e);
        }
      }
    </script>
  </body>
</html>