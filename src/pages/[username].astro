---
import Layout from '../layouts/Layout.astro';
import LinkCard from '../components/LinkCard.astro';
import AchievementCard from '../components/AchievementCard.astro';
import { Image } from 'astro:assets';
import { getProfileByUsername, getPublicProfiles } from '../data';
import type { ImageMetadata } from 'astro';

export async function getStaticPaths() {
  const profiles = getPublicProfiles();

  return profiles.map(profile => ({
    params: { username: profile.username },
    props: { profile }
  }));
}

const { profile } = Astro.props;

// Prepare Open Graph data
const ogTitle = profile.ogTitle || `${profile.name} - Linkarooie`;
const ogDescription = profile.ogDescription || profile.description;
const ogImage = profile.ogImageUrl;
---

<Layout
  title={`${profile.name} - Linkarooie`}
  description={profile.description}
  ogImage={ogImage}
  username={profile.username}
>
  <div class="max-w-4xl mx-auto pb-12">
    <!-- Banner & Avatar -->
    <div class="relative">
      <div class="w-full h-48 sm:h-64 md:h-80 overflow-hidden">
        <Image
          src={profile.bannerUrl}
          alt={`${profile.name}'s banner`}
          class="w-full h-full object-cover"
          width={1200}
          height={400}
          quality={90}
        />
      </div>

      <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2">
        <div class="w-24 h-24 md:w-32 md:h-32 rounded-full overflow-hidden border-4 border-gray-500 dark:border-gray-300 bg-white dark:bg-gray-800">
          <Image
            src={profile.avatarUrl}
            alt={`${profile.name}'s avatar`}
            class="w-full h-full object-cover"
            width={128}
            height={128}
            quality={90}
          />
        </div>
      </div>
    </div>

    <!-- Profile Info -->
    <div class="mt-16 md:mt-20 text-center px-4">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{profile.name}</h1>
      <p class="text-gray-600 dark:text-gray-400">@{profile.username}</p>

      <p class="mt-4 text-xl text-gray-700 dark:text-gray-300 max-w-2xl mx-auto">{profile.description}</p>

      <p class="mt-2 text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">{profile.bio}</p>

      <!-- Social Links -->
      {profile.socialLinks.length > 0 && (
        <div class="flex justify-center space-x-4 mt-4">
          {profile.socialLinks.map(social => {
            let iconClass = '';
            let screenReaderText = social.platform;

            // Handle special cases for social icons
            if (social.platform === 'x-twitter') {
              iconClass = 'fab fa-x-twitter text-2xl';
              screenReaderText = 'Twitter/X';
            } else if (social.platform === 'threads') {
              iconClass = 'fab fa-instagram text-2xl'; // Use Instagram icon as Threads fallback
              screenReaderText = 'Threads';
            } else {
              iconClass = `fab fa-${social.platform} text-2xl`;
            }

            return (
              <a
                href={social.url}
                target="_blank"
                rel="noopener noreferrer"
                class="text-gray-600 hover:text-[#9333ea] dark:text-gray-400 dark:hover:text-[#a5fd0e] transition-all duration-200 transform hover:scale-125"
                data-track="true"
                data-id={`social-${social.platform}`}
                data-type="social"
              >
                <i class={iconClass}></i>
                <span class="sr-only">{screenReaderText}</span>
              </a>
            );
          })}
        </div>
      )}

      <!-- Tags (clickable buttons to open modal) -->
      {profile.tags.length > 0 && (
        <div class="flex flex-wrap justify-center gap-2 mt-6 max-w-md mx-auto">
          {profile.tags.map(tag => (
            <button
              type="button"
              data-tag-name={tag.name}
              class="px-3 py-1 bg-gray-200 dark:bg-gray-800 text-[#9333ea] dark:text-[#a5fd0e] rounded-full text-sm border border-[#9333ea] dark:border-[#a5fd0e] cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors"
              aria-label={`View details for ${tag.name}`}
            >
              {tag.name}
            </button>
          ))}
        </div>
      )}
    </div>

    <!-- Links Section -->
    <section class="mt-12 px-4">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Links</h2>
      <div class="grid grid-cols-1 gap-4 max-w-2xl mx-auto">
        {profile.links.filter(link => !link.hidden).map(link => (
          <LinkCard link={link} />
        ))}
      </div>
      {profile.links.filter(link => link.hidden).map(link => (
        <LinkCard link={link} />
      ))}
    </section>

    <!-- Achievements Section -->
    <section class="mt-12 px-4">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">
        <i class="fas fa-trophy text-[#ff9500] dark:text-[#ff9500] mr-2"></i>Achievements
      </h2>
      <div class="grid grid-cols-1 gap-4 max-w-2xl mx-auto">
        {profile.achievements.filter(achievement => !achievement.hidden).map(achievement => (
          <AchievementCard achievement={achievement} />
        ))}
      </div>
      {profile.achievements.filter(achievement => achievement.hidden).map(achievement => (
        <AchievementCard achievement={achievement} />
      ))}
    </section>

    <!-- Modal for tag details -->
    <div id="tag-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 transition-opacity duration-300 ease-in-out" role="dialog" aria-modal="true" aria-labelledby="modal-title">
      <div class="relative bg-white dark:bg-gray-800 p-6 md:p-8 rounded-lg md:rounded-xl mx-4 max-w-lg w-full max-h-[90vh] md:max-h-[80vh] overflow-y-auto shadow-2xl border border-gray-300 dark:border-gray-700 transform transition-transform duration-300 ease-out scale-95 opacity-0" id="modal-content">
        <!-- Close button at top right -->
        <button id="close-modal" class="absolute top-4 right-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors" aria-label="Close modal">
          <i class="fas fa-times text-xl"></i>
          <span class="sr-only">Close</span>
        </button>

        <!-- Tag header with icon -->
        <div class="flex items-center mb-4">
          <i class="fas fa-tag text-[#9333ea] dark:text-[#a5fd0e] mr-3 text-xl"></i>
          <h3 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white"></h3>
        </div>

        <div class="mt-2 mb-4 border-t border-gray-200 dark:border-gray-700"></div>

        <!-- Tag description -->
        <p id="modal-description" class="mt-2 text-gray-700 dark:text-gray-300 text-lg"></p>

        <!-- Citation link -->
        <div id="modal-citation" class="mt-4 font-medium"></div>

        <!-- Related work section -->
        <div id="modal-related-work" class="mt-6"></div>

        <!-- Close button at bottom -->
        <div class="mt-6 flex justify-end">
          <button id="close-modal-bottom" class="px-5 py-2.5 bg-[#9333ea] dark:bg-[#a5fd0e] text-white dark:text-gray-900 rounded-lg hover:bg-[#7e2cc9] dark:hover:bg-[#8de30b] transition-colors font-medium shadow-sm">
            Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Client-side script to handle modal -->
  <script define:vars={{ tags: profile.tags }}>
    window.profileTags = tags;

    // Function to set up modal functionality
    function setupModal() {
      // First check if we're on a profile page (by checking if the modal elements exist)
      const modal = document.getElementById('tag-modal');

      // If modal doesn't exist, we're probably not on a profile page, so exit gracefully
      if (!modal) {
        return;
      }

      const modalContent = document.getElementById('modal-content');
      const title = document.getElementById('modal-title');
      const description = document.getElementById('modal-description');
      const citationDiv = document.getElementById('modal-citation');
      const relatedWorkDiv = document.getElementById('modal-related-work');
      const closeButtons = document.querySelectorAll('#close-modal, #close-modal-bottom');

      if (!modalContent || !title || !description || !citationDiv || !relatedWorkDiv || !closeButtons.length) {
        console.error('Some modal elements not found');
        return;
      }

      function showTagModal(tag) {
        // Set content
        title.textContent = tag.name;
        description.textContent = tag.description || 'No description available.';

        if (tag.citation) {
          citationDiv.innerHTML = `
            <div class="flex items-center">
              <i class="fas fa-external-link-alt text-[#9333ea] dark:text-[#a5fd0e] mr-2"></i>
              <a href="${tag.citation.url}" target="_blank" rel="noopener noreferrer"
                 class="text-[#9333ea] dark:text-[#a5fd0e] hover:underline inline-flex items-center">
                ${tag.citation.title || 'Learn more'}
              </a>
            </div>
          `;
        } else {
          citationDiv.innerHTML = '';
        }

        if (tag.related_work && tag.related_work.length > 0) {
          relatedWorkDiv.innerHTML = `
            <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Related Work</h4>
            <ul class="space-y-3">
              ${tag.related_work.map(work =>
                `<li class="pb-2 border-b border-gray-100 dark:border-gray-700 last:border-0">
                  <a href="${work.url}" target="_blank" rel="noopener noreferrer"
                     class="text-[#9333ea] dark:text-[#a5fd0e] font-medium hover:underline">
                    ${work.title}
                  </a>
                  <p class="text-gray-700 dark:text-gray-300 mt-1 text-sm">
                    ${work.description}
                  </p>
                </li>`
              ).join('')}
            </ul>
          `;
        } else {
          relatedWorkDiv.innerHTML = '';
        }

        // Show modal with animation
        modal.classList.remove('hidden');
        setTimeout(() => {
          modal.classList.add('bg-opacity-50');
          modal.classList.remove('bg-opacity-0');
          modalContent.classList.remove('scale-95', 'opacity-0');
          modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);

        // Prevent body scrolling when modal is open
        document.body.style.overflow = 'hidden';
      }

      function hideModal() {
        // Hide with animation
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');

        setTimeout(() => {
          modal.classList.add('hidden');
          // Restore body scrolling
          document.body.style.overflow = '';
        }, 300);
      }

      // Set up event listeners
      closeButtons.forEach(button => {
        button.addEventListener('click', hideModal);
      });

      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          hideModal();
        }
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
          hideModal();
        }
      });

      const tagButtons = document.querySelectorAll('[data-tag-name]');
      tagButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const tagName = button.getAttribute('data-tag-name');
          const tag = window.profileTags.find(t => t.name === tagName);
          if (tag) {
            showTagModal(tag);
          }
        });
      });
    }

    // Run setup on DOMContentLoaded
    document.addEventListener('DOMContentLoaded', setupModal);

    // Also run setup immediately in case the script loads after DOMContentLoaded
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      setTimeout(setupModal, 1);
    }

    // Make sure popups work with Astro's view transitions
    document.addEventListener('astro:after-swap', setupModal);
  </script>
</Layout>
