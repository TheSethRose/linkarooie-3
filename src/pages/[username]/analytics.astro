---
import Layout from '../../layouts/Layout.astro';
import { getProfileByUsername } from '../../data';

const { username } = Astro.params;
const profile = getProfileByUsername(username);

if (!profile) {
  return Astro.redirect('/404');
}
---

<Layout title={`${profile.name} Analytics | Linkarooie`} username={username}>
  <div class="max-w-4xl mx-auto px-4 py-8">
    <div class="mb-6">
      <a href={`/${username}`} class="text-blue-600 hover:underline flex items-center">
        <i class="fas fa-arrow-left mr-2"></i> Back to Profile
      </a>
    </div>
    
    <h1 class="text-3xl font-bold mb-6">Analytics for {profile.name}</h1>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
      <div id="page-views" class="bg-white rounded-lg shadow p-6">
        <h3 class="text-xl font-semibold mb-2">Page Views</h3>
        <p id="page-views-count" class="text-3xl font-bold">Loading...</p>
      </div>
      
      <div id="unique-visitors" class="bg-white rounded-lg shadow p-6">
        <h3 class="text-xl font-semibold mb-2">Unique Visitors</h3>
        <p id="unique-visitors-count" class="text-3xl font-bold">Loading...</p>
      </div>
    </div>
    
    <div class="mb-8">
      <h2 class="text-2xl font-semibold mb-4">Link Click Statistics</h2>
      <div id="link-stats" class="bg-white rounded-lg shadow overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Link</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Clicks</th>
            </tr>
          </thead>
          <tbody id="link-stats-body" class="bg-white divide-y divide-gray-200">
            <tr>
              <td colspan="2" class="px-6 py-4 text-center">Loading...</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
    
    <div class="mb-8">
      <h2 class="text-2xl font-semibold mb-4">Geographic Distribution</h2>
      <div id="geo-stats" class="bg-white rounded-lg shadow p-6 h-64 flex items-center justify-center">
        <p class="text-gray-500">Geographic data will be displayed here</p>
      </div>
    </div>
    
    <div class="mb-8">
      <h2 class="text-2xl font-semibold mb-4">Browser Distribution</h2>
      <div id="browser-stats" class="bg-white rounded-lg shadow p-6 h-64 flex items-center justify-center">
        <p class="text-gray-500">Browser data will be displayed here</p>
      </div>
    </div>
  </div>
  
  <script define:vars={{ username }}>
    // We'll use PostHog's JS API to get analytics data
    document.addEventListener('DOMContentLoaded', async () => {
      if (window.posthog) {
        try {
          // Note: In a real implementation, you'd need a backend API 
          // to fetch detailed PostHog analytics for security reasons
          // This is a simplified example showing the concept
          
          // For demonstration only - in practice you'd use PostHog's API
          const mockData = {
            pageViews: Math.floor(Math.random() * 1000) + 100,
            uniqueVisitors: Math.floor(Math.random() * 500) + 50,
            linkClicks: [
              { name: "My Blog", clicks: 45 },
              { name: "Loftwah The Beatsmiff Beats", clicks: 32 },
              { name: "GRABIT.SH", clicks: 28 },
              { name: "Bogan Hustler", clicks: 19 }
            ]
          };
          
          // Update the UI with the data
          document.getElementById('page-views-count').textContent = mockData.pageViews;
          document.getElementById('unique-visitors-count').textContent = mockData.uniqueVisitors;
          
          const linkStatsBody = document.getElementById('link-stats-body');
          linkStatsBody.innerHTML = '';
          
          mockData.linkClicks.forEach(link => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td class="px-6 py-4 whitespace-nowrap">${link.name}</td>
              <td class="px-6 py-4 whitespace-nowrap">${link.clicks}</td>
            `;
            linkStatsBody.appendChild(row);
          });
        } catch (error) {
          console.error('Error fetching analytics:', error);
        }
      }
    });
  </script>
</Layout>