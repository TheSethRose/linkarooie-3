---
// src/components/PostHog.astro
interface Props {
  username?: string;
}

const { username } = Astro.props;

// Get environment variables for PostHog
const posthogKey = import.meta.env.POSTHOG_KEY || 'phc_BrmIHTxcm8cDyDjAGkWAimepYqJhSaXiXIVDBeMOHUM';
const posthogHost = import.meta.env.POSTHOG_HOST || 'https://us.i.posthog.com';
---

<script is:inline define:vars={{ posthogKey, posthogHost, username }}>
!function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys getNextSurveyStep onSessionId".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);

// CRITICAL FIX: Prevent infinite recursion by disabling autocapture
posthog.init(posthogKey, {
  api_host: posthogHost,
  capture_pageview: false,         // We'll handle pageviews manually
  autocapture: false,              // IMPORTANT: Disable autocapture to prevent recursion
  loaded: function(posthog) {
    // Track username if available
    if (username) {
      posthog.register({ username: username });
    }
    
    // We'll track the current page manually
    posthog.capture('pageview', {
      page: window.location.pathname,
      profile: username || 'home'
    });

    // Handle Astro page transitions with a flag to prevent double-firing
    let isTransitioning = false;
    document.addEventListener('astro:page-load', function() {
      // Skip if we're already in a transition
      if (isTransitioning) return;
      
      isTransitioning = true;
      
      // Use setTimeout to prevent recursion
      setTimeout(function() {
        posthog.capture('pageview', {
          page: window.location.pathname,
          profile: username || 'home'
        });
        isTransitioning = false;
      }, 50);
    });

    // Use event delegation for link clicks with safeguards
    document.addEventListener('click', function(event) {
      // Only proceed if we're not in a transition
      if (isTransitioning) return;
      
      const linkElement = event.target.closest('a');
      if (linkElement && linkElement.href) {
        // Only track if it's an external link or a link with a specific data attribute
        const isExternalLink = linkElement.hostname !== window.location.hostname;
        const shouldTrack = linkElement.hasAttribute('data-track') || isExternalLink;
        
        if (shouldTrack) {
          posthog.capture('link_clicked', {
            url: linkElement.href,
            text: linkElement.innerText || linkElement.textContent || 'Unknown',
            profile: username || 'home'
          });
        }
      }
    });
  }
});
</script>