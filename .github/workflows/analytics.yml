name: Cloudflare Analytics Report

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight UTC
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write

jobs:
  fetch-analytics:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq (for JSON parsing)
        run: sudo apt-get install -y jq

      - name: Fetch Cloudflare Analytics Data
        run: |
          # Add date parameters (last 30 days)
          TODAY=$(date -u +"%Y-%m-%d")
          THIRTY_DAYS_AGO=$(date -u -d "30 days ago" +"%Y-%m-%d")
          
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/analytics/dashboard?since=${THIRTY_DAYS_AGO}&until=${TODAY}" \
            -H "Authorization: Bearer ${API_KEY}" \
            -H "Content-Type: application/json")

          echo "API Response Status: $(echo "$RESPONSE" | jq '.success')"
          
          if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
            mkdir -p src/data
            echo "$RESPONSE" | jq '.result' > src/data/analytics.json
            echo "Analytics data saved successfully"
          else
            echo "Cloudflare API request failed with error:"
            echo "$RESPONSE" | jq '.errors'
            exit 1
          fi
        env:
          ZONE_ID: ${{ secrets.ZONE_ID }}
          API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if [[ -n $(git status --porcelain) ]]; then
            git add src/data/analytics.json
            git commit -m "Update Cloudflare analytics report [$(date -u)]"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Send Email Report via Resend API
        if: success()
        run: |
          if [ -f "src/data/analytics.json" ]; then
            REPORT=$(jq -r '.totals | {requests, cachedRequests, uncachedRequests, threats, bandwidth, uniqueVisitors}' src/data/analytics.json)
            
            # Format the JSON report nicely for email
            FORMATTED_REPORT=$(echo "$REPORT" | jq -r '. | to_entries | map("\(.key): \(.value)") | join("\n")')
            
            JSON_PAYLOAD=$(jq -n --arg from "$FROM_EMAIL" \
                                --arg to "$TO_EMAIL" \
                                --arg subject "Cloudflare Analytics Report - $(date -u +"%Y-%m-%d")" \
                                --arg text "Cloudflare Web Analytics Report:\n\n$FORMATTED_REPORT" \
                                '{from: $from, to: [$to], subject: $subject, text: $text}')

            SEND_RESPONSE=$(curl -s -X POST "https://api.resend.com/emails" \
              -H "Authorization: Bearer $RESEND_API_KEY" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD")
              
            echo "Email sending response: $SEND_RESPONSE"
          else
            echo "Analytics file not found, skipping email report"
          fi
        env:
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}